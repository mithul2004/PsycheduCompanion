datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch","fullTextIndex"]
}

model Category{
  id        String @id @default(uuid())
  name      String

  companions Companion[]
}

model Companion{
  id            String @id @default(uuid())
  userId        String 
  userName      String
  src           String
  name          String @db.Text
  description   String
  instructions  String @db.Text
  seed          String @db.Text

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category      Category @relation(fields:[categoryId], references: [id]) //categoryId(Companion)-->id(Category)
  categoryId    String

  messages      Message[]

  @@index([categoryId])
  @@fulltext([name]) //enables full text search on name
}

enum Role {
  user
  system
}

model Message{
  id            String @id @default(uuid())
  role          Role //message may send from user side or system side
  content       String @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  companionId   String
  userId        String

  // message is belongs to that char alone and whe  delete the char cascade the message
  companion     Companion @relation(fields:[companionId],references: [id], onDelete: Cascade)

  @@index([companionId])
}

// course contains many units
model Course {
  id    String @id @default(cuid())
  name  String
  image String
  units Unit[]
}

// unit contains many chapters
model Unit {
  id       String @id @default(cuid())
  courseId String

  name     String
  course   Course    @relation(fields: [courseId], references: [id])
  chapters Chapter[]

  @@index([courseId], name: "courseId")
}

model Chapter {
  id     String @id @default(cuid())
  unitId String

  name               String
  youtubeSearchQuery String
  videoId            String?
  summary            String?    @db.VarChar(3000)
  unit               Unit       @relation(fields: [unitId], references: [id])
  questions          Question[]

  @@index([unitId], name: "unitId")
}

model Question {
  id        String @id @default(cuid())
  chapterId String

  question String  @db.VarChar(3000)
  answer   String  @db.VarChar(3000)
  options  String  @db.VarChar(3000)
  chapter  Chapter @relation(fields: [chapterId], references: [id])

  @@index([chapterId], name: "chapterId")
}